package generated

import be.objectify.deadbolt.scala.models._
import dao.UserDao
import generated.Tables.{LinkedAccountRow, UserRow}

/**
  * Identifyable base for all Model types, it is also a Product
  *
  * @tparam PK Primary key type
  */
trait Entity[PK] {
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  def id : PK
}

/**
  * Identifyable base for all Strong Entity Model types
  * @tparam PK Primary key type
  * @tparam E Actual case class EntityRow type
  */
trait AutoIncEntity[PK, E <: AutoIncEntity[PK, E]] extends Entity[PK] { self: E =>
  import shapeless._
  import tag.@@
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  /**
    * Returns the entity with updated id as generated by the database
    * @param id The auto increment generated entity id
    * @return the entity with updated id as generated by the database
    */
  def copyWithNewId(id : PK)(implicit mkLens: MkFieldLens.Aux[E, Symbol @@ Witness.`"id"`.T, PK]) : E = {
    (lens[E] >> 'id).set(self)(id)
  }
}

/**
  * Identifyable table for all Table types
  * @tparam PK Primary key type
  */
trait IdentifyableTable[PK] {
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  def id : slick.lifted.Rep[PK]
}

/**
  * User adapter trait and object that offer implicit conversion from generated
  * UserRow to be.objectify.deadbolt.scala.models.Subject and other inline
  * operations available
  */
trait UserRowAdapter extends Subject {
  //------------------------------------------------------------------------
  def providers : Seq[String]
}

object UserRowAdapter {
  //------------------------------------------------------------------------
  implicit def toSubject(user : UserRow)(implicit userDao: UserDao) : UserRowAdapter = new UserRowAdapter {
    import dao.ExecHelper._

    //------------------------------------------------------------------------
    override def identifier: String = user.id.toString

    //------------------------------------------------------------------------
    override def roles : List[Role] = {
      val roles = userDao.getRoles(user)
      roles.toList
    }

    //------------------------------------------------------------------------
    override def permissions : List[Permission] = {
      val permissions = userDao.getPermissions(user)
      permissions.toList
    }

    //------------------------------------------------------------------------
    override def providers : Seq[String] = {
      val providers : Seq[LinkedAccountRow] = userDao.getLinkedAccounts(user)
      providers.map(_.providerKey)
    }
  }
}