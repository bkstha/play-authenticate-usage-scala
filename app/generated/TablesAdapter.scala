package generated

import shapeless._, tag.@@
import shapeless._
import tag.$at$at

/**
  * Identifyable base for all Model types, it is also a Product
  *
  * @tparam PK Primary key type
  */
trait Entity[PK] {
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  def id : PK
}

/**
  * Identifyable base for all Strong Entity Model types
  * @tparam PK Primary key type
  * @tparam E Actual case class EntityRow type
  */
trait AutoIncEntity[PK, E <: AutoIncEntity[PK, E]] extends Entity[PK] { self: E =>
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  /**
    * Returns the entity with updated id as generated by the database
    * @param id The auto increment generated entity id
    * @return the entity with updated id as generated by the database
    */
  def copyWithNewId(id : PK)(implicit mkLens: MkFieldLens.Aux[E, Symbol @@ Witness.`"id"`.T, PK]) : E = {
    (lens[E] >> 'id).set(self)(id)
  }
}

/**
  * Identifyable table for all Table types
  * @tparam PK Primary key type
  */
trait IdentifyableTable[PK] {
  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  def id : slick.lifted.Rep[PK]
}

/*
abstract class BaseUser[PK] @Inject()(userDao: UserDao) extends AutoIncEntity[PK] with Subject { self: UserRow =>
  import ExecHelper._

  //------------------------------------------------------------------------
  // public
  //------------------------------------------------------------------------
  override def identifier: String = id.toString

  //------------------------------------------------------------------------
  override def roles : List[Role] = {
    val roles = userDao.getRoles(self)
    roles.toList
  }

  //------------------------------------------------------------------------
  override def permissions : List[Permission] = {
    val permissions = userDao.getPermissions(self)
    permissions.toList
  }
}
*/